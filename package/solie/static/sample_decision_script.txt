import math
from datetime import datetime, timedelta, timezone
from solie.utility import Decision, OrderType, PositionDirection

acquire_ratio = 0.8 / len(target_symbols)  # Split asset by symbol count
wallet_balance = account_state.wallet_balance

for symbol in target_symbols:

    current_price = current_candle_data[str((symbol, "Close"))]

    indicator_key = str((symbol, "Price", "SMA One (#00BBFF)"))
    price_sma_one = current_indicators[indicator_key]
    indicator_key = str((symbol, "Price", "SMA Two (#FF6666)"))
    price_sma_two = current_indicators[indicator_key]

    position = account_state.positions[symbol]

    scribbles["remember_data"] = True  # Remember something
    remember_data = scribbles.get("remember_data", False)  # Get it later

    if position.direction == PositionDirection.NONE:
        if price_sma_one > price_sma_two:
            decisions[symbol][OrderType.NOW_BUY] = Decision(
                margin=acquire_ratio * wallet_balance,
            )
        elif price_sma_one < price_sma_two:
            decisions[symbol][OrderType.NOW_SELL] = Decision(
                margin=acquire_ratio * wallet_balance,
            )

    elif position.direction == PositionDirection.LONG:
        if price_sma_one < price_sma_two:
            # Flip
            decisions[symbol][OrderType.NOW_SELL] = Decision(
                margin=position.margin + acquire_ratio * wallet_balance
            )

    elif position.direction == PositionDirection.SHORT:
        if price_sma_one > price_sma_two:
            # Flip
            decisions[symbol][OrderType.NOW_BUY] = Decision(
                margin=position.margin + acquire_ratio * wallet_balance
            )
